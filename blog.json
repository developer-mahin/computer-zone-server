[
  {
    "title": "What are the different ways to manage a state in a React application?",
    "description": "Local (UI) state – Local state is data we manage in one or another component. Local state is most often managed in React using the useState hook. For example, local state would be needed to show or hide a modal component or to track values for a form component, such as form submission, when the form is disabled and the values of a form’s inputs. \\n Global (UI) state – Global state is data we manage across multiple components. Global state is necessary when we want to get and update data anywhere in our app, or in multiple components at least. A common example of global state is authenticated user state. If a user is logged into our app, it is necessary to get and change their data throughout our application. Sometimes state we think should be local might become global. '\\n' Server state – Data that comes from an external server that must be integrated with our UI state.  Server state is a simple concept, but can be hard to manage alongside all of our local and global UI state. There are several pieces of state that must be managed every time you fetch or update data from an external server, including loading and error state.Fortunately there are tools such as SWR and React Query that make managing server state much easier. URL state – Data that exists on our URLs, including the pathname and query parameters. '\\n' URL state is often missing as a category of state, but it is an important one. In many cases, a lot of major parts of our application rely upon accessing URL state. Try to imagine building a blog without being able to fetch a post based off of its slug or id that is located in the URL! There are undoubtedly more pieces of state that we could identify, but these are the major categories worth focusing on for most applications you build.",
    "image": "https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/content/cover_image_file/cover_image/1019204/image_0-1967657e3078be54d78ccc4d57eae106-f763757d0bd43e58ff9976083b458547.png"
  },

  {
    "title": "How does prototypical inheritance work?",
    "description": "Every object with its methods and properties contains an internal and hidden property known as [[Prototype]]. The Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. Traditionally, in order to get and set the [[Prototype]] of an object, we use Object.getPrototypeOf and Object.setPrototypeOf. Nowadays, in modern language, it is being set using",
    "image": "https://www.cronj.com/blog/wp-content/uploads/inheritance.png.webp"
  },
  {
    "title": "What is a unit test? Why should we write unit tests?",
    "description": "What is a unit test? \n Unit testing is an important step in the development process, because if done correctly, it can help detect early flaws in code which may be more difficult to find in later testing stages. Unit testing is a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation. This testing methodology is done during the development process by the software developers and sometimes QA staff.  The main objective of unit testing is to isolate written code to test and determine if it works as intended. \n Why should we write unit tests? They enable you to catch bugs early in the development process. Automated unit tests help a great deal with regression testing. They detect code smells in your codebase. For example, if you're having a hard time writing unit tests for a piece of code, it might be a sign that your function is too complex.",
    "image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcScS_7KkWYDdIJGyLtNxT8ZVB4T8nuXhrWewGkLqgbGV1CDA7KRYlOY8Lh2JDv_rfGGXbQ&usqp=CAU"
  }, 

  {
    "title": "React vs. Angular vs. Vue?",
    "description": "React is a javascript library. ReactJS is a smaller piece of the overall puzzle. ReactJS is responsible for the ’view’ element of application development in a modal-view-Controller (MVC) framework. The template used by ReactJS is JSX (JavaScript XML), which combines the JavaScript code and markup in one line of code to efficiently create user interfaces. ReactJS maintains a virtual DOM which allows it to be lightning fast. ReactJS is a library for building and rendering components. The virtual DOM feature of ReactJS allows its applications to virtually update the changes without rewriting the entire HTML document which renders updates much quicker. ReactJS supports unidirectional data binding or what is commonly known as one-way data binding means that data flows one way while synchronizing the model and view. React applications requires you to rely on third-party tools and supporting integrations external to ReactJS. reactJS uses JSX (JavaScript XML), which is fairly easy to learn if you have prior experience with writing code in JavaScript \n Angular is a complete framework built on TypeScript - a superset of JavaScript. angular is a collection of all different puzzle pieces. Angular is a complete MVC framework for front-end-development. Angular used templates based on advanced HTML, which means you will need to learn the proper HTML syntax in order to be able to write code Angular. Angular has a regular DOM which updates the entire HTML structure every time a new change js made. Angular is not only about components it offers more solutions that simply create components such as routing state management from validations and other tools that you need to develop enormous applications. The regular DOM feature of angular makes the application slow in performance, especially when compared to applications built using ReactJS. The angular data binding model is bi-directional, meaning that there is a two-way data flow between the model and the view. Angular includes additional tools like routing, state management, HTTPS, etc which help you build large-scale apps, which means it comes packed with all the core features that you may require. A beginner needs to familiarise themself with the TypeScript language that angular uses. He will also need to learn about all the rich topics that Angular comprises, from components, templates, modules, and other basic concepts to the more complex ones like dependency injections, change detection, and RxJS.  \n Vue.js is a JavaScript-based progressive framework for creating single-page applications. It was created with scalability and incrementality in mind, as well as ease of integration with other view layer frameworks. Vue is built from the bottom up to be progressively adaptable, unlike other monolithic frameworks. The core library focuses solely on the view layer, and it’s simple to use and connect with other libraries or applications. This framework’s fast learning angle is almost a trademark. It’s a flexible framework that may be used as a library or a full-fledged framework for developing large web applications. Vue.js combines the useful principles of the Angular and React frameworks and presents them in a minimalistic modern style. Web developers use Vue.js to create frontend user interfaces for web-based and hybrid mobile applications.",
    "image": "https://presence.agency/wp-content/uploads/2020/07/1_lC1kj3IeXoE8Z3OCKJoWkw.jpeg"
  }
]
